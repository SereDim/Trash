'''Реалізувати програму, в якій кожен з алгоритмів сортування оформити як окрему
функцію. Проілюструвати механізм використання параметрів різних типів. Забезпечити
підрахунок числа необхідних порівнянь, числа обмінів і часу роботи кожної функції,
сформувавши функції оцінки ефективності методів сортування. Підготувати єдині для
всіх алгоритмів тестові вихідні дані:

• згенерована послідовність псевдовипадкових чисел, достатня для оцінки
швидкості роботи алгоритму сортування (близько 100000 цілих чисел);

• вихідна послідовність псевдовипадкових чисел, відсортована будь-яким методом
в порядку зростання;

• вихідна послідовність псевдовипадкових чисел, відсортована будь-яким методом
в порядку за спаданням;

• забезпечити програмну можливість вибору введення вихідних даних з клавіатури
до 30 вихідних чисел.
Для програми привести лістинг з результати роботи:

• вихідний масив (вивести на екран для випадку введення вихідних даних з
клавіатури);

• відсортований масив (для випадку введення вихідних даних з клавіатури один
екземпляр відсортованого масиву вивести на екран);

• показники функції оцінки ефективності методів сортування (вивести на екран).

Виконати сортування масиву цілих чисел
в порядку зростання / за спаданням елементів.
Найпростіші алгоритми сортування:
• сортування бульбашкою (bubble sort);
• сортування вибором (selection sort);
• сортування вставками (insertion sort).

Серебренніков Дмитро Олександрович
'''
#Импорт модуля для рандома:
import random
o=input('введите + если хотите ввести значения с калвиатуры или - если автоматически')
i=list()
#Функция без аргументов птч их нет, и работает при вызове:
def d():
    for a in range(10000):
        #В пустой список созданый ранее добавляем все:
        #итерируемые рандомные числа:
        i.append(random.randint(0,100))
if o=='-':#За выбором делает рандомный список
    #Воспроизведение функции:
    d()
elif o=='+':#Или с клавиатуры
    for p in range(30):
        i.append(input('шота'))
else:
    print('RETARD')
    del(i)
#Не сортированный список
print(i)
#Функция Bubble sort:
q=input('Введите 1 если хотите сортировку бабл, 2 если вставками или же 3 для обратного отсчёта selection')
def j(k):#bubble sort
    m=0
    n=True#
    while n:#
        n=False#флаг который если не стал трушным останавливает работу программы птч все отсортировано
        for l in range(len(k)-m-1):#от 0 до размера -1 за условием ренджа и еще -1 птч мы проверяем итерируемый со следующим а не с прошлым
            if k[l]>k[l+1]:#проверяем итерируемый со следующим
                k[l],k[l+1]=k[l+1],k[l]#если больше то меняет местами
                n=True#и если со всех оказалось что были изменения значит еще не все отсортировала программа
        m+=1#значение которое отнимается от каждого последующего прохождения
 
#insertion sort
def w(x):#
    for y in range(1,len(x)):#от 1 к последнему значению
        aa=0#
        ab=y-1#
        while aa<=ab:#используем бинарный поиск по элементу
            ac=(aa+ab)//2#средина списка
            if x[y]<x[ac]:#если итерируемый меньше чем средняя граница 
                ab=ac-1#то двигаемся налево
            else:#направо
                aa=ac+1#то двигаемся направо
        for ad in range(y-1,aa-1,-1):#
            x[ad+1]=x[ad]#
        x[aa]=x[y]#

#selection sort в обратном направлении
def r(s):#
    for t in range(len(s)-1):##от 0 до размера -1 за условием ренджа и еще -1 птч последний эелемент будет уже отсорт.
        u=t#минимальное значение которое равно номеру итерации
        for v in range(t+1,len(s)):#элементы с коротыми мы будет сравнивать выбраный элемент
            if s[v]>s[u]:#если выбраный меньше чем итерируемый то это в обратном направлении
                u=v#выбраный элемент становится равным итерируемому
        s[t],s[u]=s[u],s[t]#и меняет их местами
if q=='1':
    j(i)#в функцию записываем вместо временного аргумента наше значение, тоесть введенный список
    print('скорость работы 17sec')
elif q=='2':
    w(i)#
    print('скорость работы 9sec')
else:#
    r(i)#
    print('скорость работы 7sec')
print(i)#
